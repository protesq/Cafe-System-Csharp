<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DocumentFormat.OpenXml.Features</name>
    </assembly>
    <members>
        <member name="T:DocumentFormat.OpenXml.Features.ISharedFeature`1">
            <summary>
            A feature to create a composite feature if shared among multiple instances.
            </summary>
            <typeparam name="T">Type of shared feature.</typeparam>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ISharedFeature`1.Count">
            <summary>
            Gets the count of features registered.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.ISharedFeature`1.Add(`0)">
            <summary>
            Adds an instance to the shared collection.
            </summary>
            <param name="feature">Feature to add</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.ISharedFeature`1.Remove(`0)">
            <summary>
            Removes a feature instance from the shared collection.
            </summary>
            <param name="feature">Feature to remove.</param>
            <returns>Whether the feature was removed or not.</returns>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ISharedFeature`1.Composite">
            <summary>
            Gets a composite feature that handles delegating to the registered features in the collection.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature">
            <summary>
            Provides access to the paragraph id collection in a document.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature.Count">
            <summary>
            Gets a count of all the registered paragraph ids.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature.Contains(System.String)">
            <summary>
            Identifies if the id exists.
            </summary>
            <param name="id">The id to check.</param>
            <returns>Whether the feature is tracking that id.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IParagraphIdGeneratorFeature">
            <summary>
            A generator for paragraph id values that can ensure uniqueness if <see cref="T:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature"/> is registered.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IParagraphIdGeneratorFeature.CreateUniqueParagraphId">
            <summary>
            Creates a w14:paraId (ParagraphId) value that is greater than 0x00000000, less than
            0x80000000, and unique within the scope of the <see cref="T:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature" />
            instance.
            </summary>
            <returns>A unique paragraph id value.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.ParagraphIdFeatureExtensions">
            <summary>
            Extensions to add paragraph id generation to a document
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.ParagraphIdFeatureExtensions.AddParagraphIdFeature(DocumentFormat.OpenXml.Packaging.WordprocessingDocument,DocumentFormat.OpenXml.Features.ParagraphIdOptions)">
            <summary>
            Add the paragraph id feature if not already registered.
            </summary>
            <param name="doc">Document to add feature to.</param>
            <param name="options">Options of how paragraph ids should be generated.</param>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.ParagraphIdFeatureExtensions.AddParagraphIdGeneratorFeature(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)">
            <summary>
            Adds a <see cref="T:DocumentFormat.OpenXml.Features.IParagraphIdGeneratorFeature"/> if not already available.
            </summary>
            <param name="doc">Document to add generator to.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.ParagraphIdOptions">
            <summary>
            Options to declare how paragraph ids should be generated.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ParagraphIdOptions.AutoGenerateIds">
            <summary>
            Gets or sets a value indicating whether or not paragraph ids should be auto-generated on elements.
            </summary>
        </member>
        <member name="P:DocumentFormat.OpenXml.Features.ParagraphIdOptions.EnsureUniquenessOnExistingNodes">
            <summary>
            Gets or sets a value indicating whether or not uniqueness should be guaranteed on elements added to the document. This will change a node's para id if it has already been registered.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.SharedParagraphIdFeatureExtensions">
            <summary>
            A collection of extensions that will add support for shared <see cref="T:DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature"/> instances among multiple documents.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.SharedParagraphIdFeatureExtensions.AddSharedParagraphIdFeature(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)">
            <summary>
            Registers a document for a shared paragraph id collection.
            </summary>
            <param name="doc">Document to register for a shared collection.</param>
            <returns>The existing or new shared collection.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.SharedParagraphIdFeatureExtensions.Add(DocumentFormat.OpenXml.Features.ISharedFeature{DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature},DocumentFormat.OpenXml.Packaging.WordprocessingDocument)">
            <summary>
            Registers a document to use a shared paragraph collection, which potentially may ensure uniqueness among many documents.
            </summary>
            <param name="shared">Shared collection feature.</param>
            <param name="doc">Document to register with shared paragraph collection.</param>
            <returns></returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.SharedParagraphIdFeatureExtensions.Add(DocumentFormat.OpenXml.Features.ISharedFeature{DocumentFormat.OpenXml.Features.IParagraphIdCollectionFeature},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add arbitrary values to be tracked as a shared collection.
            </summary>
            <param name="shared">Shared collection feature.</param>
            <param name="paragraphIds">Paragraph ids to be included with the shared collection.</param>
            <returns></returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.IRandomNumberGeneratorFeature">
            <summary>
            A feature to generate random numbers
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.IRandomNumberGeneratorFeature.GetBytes(System.Byte[])">
            <summary>
            Fills the supplied bytes with random values.
            </summary>
            <param name="bytes">Bytes to fill.</param>
        </member>
        <member name="T:DocumentFormat.OpenXml.Features.RandomNumberGeneratorFeatureExtensions">
            <summary>
            Extensions to add a random number generator to a feature set.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.Features.RandomNumberGeneratorFeatureExtensions.AddRandomNumberGeneratorFeature(DocumentFormat.OpenXml.Packaging.OpenXmlPackage)">
            <summary>
            Add a random number generator to the package.
            </summary>
        </member>
        <member name="T:DocumentFormat.OpenXml.HexStringFactory">
            <summary>
            A factory of hex strings.
            </summary>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexStringFactory.Create(DocumentFormat.OpenXml.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a new hex string that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new hex string.</param>
            <returns>A hex string that corresponds to the value parameter.</returns>
        </member>
        <member name="M:DocumentFormat.OpenXml.HexStringFactory.Create(System.Byte[])">
            <summary>
            Returns a new hex string that was created from <paramref name="bytes"/>.
            </summary>
            <param name="bytes">A byte array to use to create a new hex string.</param>
            <returns>A hex string that corresponds to the value parameter.</returns>
        </member>
        <member name="T:DocumentFormat.OpenXml.Framework.HashCode">
            <summary>
            A helpful utility to generate hashcodes. This is in box in .NET Core 2.1 and .NET Standard 2.1 (and later versions)
            but this provides support for down-level. This does not implement as sophisticated an algorithm as that version does,
            but this should be sufficient for most use cases.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets a value indicating whether the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets a value indicating whether the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
